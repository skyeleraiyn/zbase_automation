/*
 *	 Copyright 2013 Zynga Inc
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
<?php

add_keys($argv[1], $argv[2], $argv[3], $argv[4]);

function add_keys($number_of_keys_to_be_pumped, $chk_max_items, $key_start_id = 0, $object_size_value = 1024) {
		global $instance;
		$counter_chk_max_items = 0;
		
		$instance = new memcache();
		$instance->addserver("localhost", 11211);
		$instance->setproperty("EnableChecksum", True);		
		if(is_numeric($object_size_value)){
			$value = generate_data($object_size_value);
		} 
		if($chk_max_items <> -1){
			$counter_chk_max_items = $chk_max_items;			
			$open_checkpoint_id = get_checkpoint_stats();
		}
		for($inum_keys=0 ; $inum_keys<$number_of_keys_to_be_pumped ; $inum_keys++){
			if($key_start_id){
				$key = "testkey_".$key_start_id;
				$key_start_id++;
			} else {
				$key = uniqid("testkey_");
			}
			if(!is_numeric($object_size_value)){
				$value = $key."_".$object_size_value;
			}
			$instance->set($key, $value);
			if($chk_max_items){
				if($counter_chk_max_items == 1){
					for($iattempt_check_checkpoint_closure=0; $iattempt_check_checkpoint_closure<10 ; $iattempt_check_checkpoint_closure++){
						$temp_open_checkpoint_id = get_checkpoint_stats();
						if($temp_open_checkpoint_id == $open_checkpoint_id + 1){
							$open_checkpoint_id = $temp_open_checkpoint_id;
							break;
						}
						// Failed to close checkpoint after 20 seconds
						if($iattempt_check_checkpoint_closure == 9) exit_message("False");
						sleep(2);
					}					
					$counter_chk_max_items = $chk_max_items;
				} else {
					$counter_chk_max_items--;
				}
			}
		}
		sleep(2);
		exit_message("True");
	}

	function get_checkpoint_stats(){
		global $instance;
		
		$acheckpoint_stats = $instance->getstats("checkpoint");
		$acheckpoint_stats = $acheckpoint_stats["vb_0"];
		return trim($acheckpoint_stats["open_checkpoint_id"]);
	}
	
	function exit_message($message){
		echo $message;
		exit;
	}


	function generate_data($object_size){
		$UserData = "GAME_ID_#@";
		if($object_size > 1048576){
			while(1){
				if(strlen($UserData) >= 524288) 
				break;
				else
				$UserData = $UserData.rand(11111, 99999);	

			}
			$tempUserData = $UserData;
			while(1){
				if(strlen($UserData) >= $object_size) 
				break;
				else
				$UserData = $UserData.rand(1,9).$tempUserData;	
			}	
			return serialize($UserData);	
		} else {
			while(1){
				if(strlen($UserData) >= $object_size) 
				break;
				else
				$UserData = $UserData.rand(11111, 99999);	
			}
			return serialize($UserData);
		}	
	}
	
?>
